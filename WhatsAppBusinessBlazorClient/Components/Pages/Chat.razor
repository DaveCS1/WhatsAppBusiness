@page "/chat"
@rendermode InteractiveServer
@using WhatsAppBusinessBlazorClient.Models
@using WhatsAppBusinessBlazorClient.Services
@inject IJSRuntime JSRuntime
@inject ApiService ApiService
@inject ILogger<Chat> Logger

<PageTitle>WhatsApp Business Admin - Chat</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Contact List -->
        <div class="col-md-4 border-end">
            <div class="p-3 border-bottom">
                <h5>Contacts</h5>
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search contacts..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterContacts">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                </div>
            </div>
            <div class="contact-list" style="height: calc(100vh - 200px); overflow-y: auto;">
                @if (filteredContacts != null)
                {
                    @foreach (var contact in filteredContacts)
                    {
                        <div class="contact-item p-3 border-bottom @(selectedContact?.Id == contact.Id ? "bg-primary text-white" : "")" 
                             style="cursor: pointer;" @onclick="() => SelectContact(contact)">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="mb-1">@contact.DisplayName</h6>
                                    <small class="@(selectedContact?.Id == contact.Id ? "text-white-50" : "text-muted")">
                                        @contact.WaId
                                    </small>
                                    @if (!string.IsNullOrEmpty(contact.ExtractedUserName))
                                    {
                                        <div class="mt-1">
                                            <span class="badge @(selectedContact?.Id == contact.Id ? "bg-light text-dark" : "bg-secondary")">
                                                @contact.LastExtractedTourType
                                            </span>
                                        </div>
                                    }
                                </div>
                                <small class="@(selectedContact?.Id == contact.Id ? "text-white-50" : "text-muted")">
                                    @contact.LastMessageTimestamp.ToString("HH:mm")
                                </small>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="p-3 text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Chat Window -->
        <div class="col-md-8 d-flex flex-column">
            @if (selectedContact != null)
            {
                <!-- Chat Header -->
                <div class="p-3 border-bottom bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-0">@selectedContact.DisplayName</h6>
                            <small class="text-muted">@selectedContact.WaId</small>
                            @if (!string.IsNullOrEmpty(selectedContact.ExtractedUserName))
                            {
                                <div class="mt-1">
                                    <span class="badge bg-info">AI: @selectedContact.ExtractedUserName</span>
                                    <span class="badge bg-success">@selectedContact.LastExtractedTourType</span>
                                    <span class="badge bg-warning">@selectedContact.LastExtractedTourDate @selectedContact.LastExtractedTourTime</span>
                                </div>
                            }
                        </div>
                        <button class="btn btn-outline-primary btn-sm" @onclick="RefreshMessages">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="TestApiConnection">
                            <i class="bi bi-wifi"></i> Test API
                        </button>
                    </div>
                </div>

                <!-- Messages -->
                <div class="flex-grow-1 p-3" style="overflow-y: auto; height: calc(100vh - 300px);" id="messagesContainer">
                    @if (messages != null)
                    {
                        @foreach (var message in messages)
                        {
                            <div class="mb-3 d-flex @(message.IsFromMe ? "justify-content-end" : "justify-content-start")">
                                <div class="message-bubble @(message.IsFromMe ? "bg-primary text-white" : "bg-light") p-3 rounded" 
                                     style="max-width: 70%;">
                                    <div style="white-space: pre-wrap;">@message.Body</div>
                                    <small class="@(message.IsFromMe ? "text-white-50" : "text-muted") d-block mt-1">
                                        @message.Timestamp.ToString("HH:mm") • @message.Status
                                    </small>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading messages...</span>
                            </div>
                        </div>
                    }
                </div>

                <!-- Message Input -->
                <div class="p-3 border-top">
                    <div class="input-group">
                        <textarea class="form-control" placeholder="Type your message..." @bind="newMessage" 
                                  @onkeypress="HandleKeyPress" rows="2" disabled="@isSending"></textarea>
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@(isSending || string.IsNullOrWhiteSpace(newMessage))">
                            @if (isSending)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-send"></i>
                            }
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-chat-dots" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">Select a contact to start chatting</h5>
                        <p>Choose a contact from the list to view their conversation history and send messages.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Contact>? contacts;
    private List<Contact>? filteredContacts;
    private List<Message>? messages;
    private Contact? selectedContact;
    private string searchTerm = "";
    private string newMessage = "";
    private bool isSending = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Chat component initializing...");
        // Load contacts immediately
        await LoadContacts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("Chat component first render completed");
            // If contacts weren't loaded in OnInitializedAsync, try again
            if (contacts == null || !contacts.Any())
            {
                Logger.LogInformation("Contacts not loaded, retrying...");
                await LoadContacts();
                StateHasChanged();
            }
        }
    }

    private async Task LoadContacts()
    {
        try
        {
            Logger.LogInformation("Loading contacts from API...");
            contacts = await ApiService.GetContactsAsync();
            
            if (contacts != null && contacts.Any())
            {
                Logger.LogInformation("Loaded {Count} contacts from API", contacts.Count);
                filteredContacts = contacts.OrderByDescending(c => c.LastMessageTimestamp).ToList();
            }
            else
            {
                Logger.LogWarning("API returned empty contact list, using sample data");
                LoadSampleContacts();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading contacts from API: {Message}", ex.Message);
            // Fallback to sample data if API is not available
            LoadSampleContacts();
        }
    }

    private void LoadSampleContacts()
    {
        Logger.LogInformation("Loading sample contacts...");
        contacts = new List<Contact>
        {
            new Contact
            {
                Id = 1,
                WaId = "1234567890",
                DisplayName = "John Smith (Sample)",
                LastMessageTimestamp = DateTime.Now.AddMinutes(-5),
                ExtractedUserName = "John",
                LastExtractedTourType = "Food Tour",
                LastExtractedTourDate = "tomorrow",
                LastExtractedTourTime = "2 PM",
                CreatedAt = DateTime.Now.AddDays(-2),
                UpdatedAt = DateTime.Now.AddMinutes(-5)
            },
            new Contact
            {
                Id = 2,
                WaId = "0987654321",
                DisplayName = "Jane Doe (Sample)",
                LastMessageTimestamp = DateTime.Now.AddMinutes(-15),
                ExtractedUserName = "Jane",
                LastExtractedTourType = "City Tour",
                LastExtractedTourDate = "next week",
                LastExtractedTourTime = "10 AM",
                CreatedAt = DateTime.Now.AddDays(-1),
                UpdatedAt = DateTime.Now.AddMinutes(-15)
            }
        };
        filteredContacts = contacts.OrderByDescending(c => c.LastMessageTimestamp).ToList();
        Logger.LogInformation("Loaded {Count} sample contacts", contacts.Count);
    }

    private async Task SelectContact(Contact contact)
    {
        selectedContact = contact;
        await LoadMessages(contact.Id);
    }

    private async Task LoadMessages(int contactId)
    {
        messages = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading messages for contact {ContactId}", contactId);
            messages = await ApiService.GetMessagesAsync(contactId);
            
            if (messages != null && messages.Any())
            {
                Logger.LogInformation("Loaded {Count} messages for contact {ContactId}", messages.Count, contactId);
            }
            else
            {
                Logger.LogInformation("No messages found for contact {ContactId}, using sample data", contactId);
                LoadSampleMessages(contactId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading messages for contact {ContactId}: {Message}", contactId, ex.Message);
            // Fallback to sample messages if API is not available
            LoadSampleMessages(contactId);
        }

        StateHasChanged();
        await ScrollToBottom();
    }

    private void LoadSampleMessages(int contactId)
    {
        messages = new List<Message>
        {
            new Message 
            { 
                Id = 1, 
                ContactId = contactId, 
                Body = "Hello! I'm interested in booking a tour.", 
                IsFromMe = false, 
                Timestamp = DateTime.Now.AddMinutes(-30), 
                Status = "delivered" 
            },
            new Message 
            { 
                Id = 2, 
                ContactId = contactId, 
                Body = "Hi! Thanks for your interest. What type of tour are you looking for?", 
                IsFromMe = true, 
                Timestamp = DateTime.Now.AddMinutes(-25), 
                Status = "sent" 
            },
            new Message 
            { 
                Id = 3, 
                ContactId = contactId, 
                Body = "I'd like a food tour for tomorrow around 2 PM.", 
                IsFromMe = false, 
                Timestamp = DateTime.Now.AddMinutes(-20), 
                Status = "delivered" 
            },
            new Message 
            { 
                Id = 4, 
                ContactId = contactId, 
                Body = "Sample message - API not connected", 
                IsFromMe = false, 
                Timestamp = DateTime.Now.AddMinutes(-10), 
                Status = "delivered" 
            }
        };
    }

    private void FilterContacts()
    {
        Logger.LogInformation("Filtering contacts with search term: '{SearchTerm}'", searchTerm);
        
        if (contacts == null) 
        {
            Logger.LogWarning("Cannot filter contacts - contacts list is null");
            return;
        }

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredContacts = contacts.OrderByDescending(c => c.LastMessageTimestamp).ToList();
            Logger.LogInformation("Search term empty, showing all {Count} contacts", filteredContacts.Count);
        }
        else
        {
            filteredContacts = contacts
                .Where(c => c.DisplayName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                           c.WaId.Contains(searchTerm) ||
                           (c.ExtractedUserName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .OrderByDescending(c => c.LastMessageTimestamp)
                .ToList();
            Logger.LogInformation("Filtered to {Count} contacts matching '{SearchTerm}'", filteredContacts.Count, searchTerm);
        }
        
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (selectedContact == null || string.IsNullOrWhiteSpace(newMessage)) return;

        isSending = true;
        var messageText = newMessage;
        newMessage = "";

        // Add message to UI immediately
        var sentMessage = new Message
        {
            Id = messages?.Count + 1 ?? 1,
            ContactId = selectedContact.Id,
            Body = messageText,
            IsFromMe = true,
            Timestamp = DateTime.Now,
            Status = "sending"
        };

        messages?.Add(sentMessage);
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            // Send message via API
            var success = await ApiService.SendMessageAsync(selectedContact.Id, messageText);
            
            // Update message status
            sentMessage.Status = success ? "sent" : "failed";
            if (success)
            {
                selectedContact.LastMessageTimestamp = DateTime.Now;
            }
        }
        catch (Exception ex)
        {
            sentMessage.Status = "failed";
        }

        isSending = false;
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task RefreshMessages()
    {
        if (selectedContact != null)
        {
            await LoadMessages(selectedContact.Id);
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messagesContainer");
    }

    private async Task TestApiConnection()
    {
        try
        {
            Logger.LogInformation("Testing API connection...");
            var isConnected = await ApiService.TestApiConnectionAsync();
            var message = isConnected ? "✅ API connection successful!" : "❌ API connection failed!";
            
            Console.WriteLine(message);
            Logger.LogInformation(message);
            
            // For debugging, let's also try to get contacts directly
            if (isConnected)
            {
                Logger.LogInformation("API connection successful, reloading contacts...");
                await LoadContacts();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"❌ API test error: {ex.Message}";
            Console.WriteLine(errorMessage);
            Logger.LogError(ex, "API connection test failed");
        }
    }
}

<style>
    .contact-item:hover {
        background-color: #f8f9fa !important;
    }

    .message-bubble {
        word-wrap: break-word;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .h-100 {
        height: 100vh !important;
    }
</style>

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script> 