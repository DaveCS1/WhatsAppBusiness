@page "/test"
@rendermode InteractiveServer
@inject ApiService ApiService
@inject ILogger<Test> Logger

<PageTitle>API Test</PageTitle>

<h3>API Service Test</h3>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">API Connection Test</h5>
        
        @if (testResult != null)
        {
            <div class="alert @(testResult.Success ? "alert-success" : "alert-danger")">
                <strong>@(testResult.Success ? "✅ Success" : "❌ Failed"):</strong> @testResult.Message
            </div>
        }
        
        <button class="btn btn-primary" @onclick="TestConnection" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            Test API Connection
        </button>
        
        <button class="btn btn-secondary ms-2" @onclick="SimpleTest" @onclick:preventDefault="false">
            Simple Test
        </button>
        
        @if (baseAddress != null)
        {
            <div class="mt-3">
                <strong>Status:</strong> @baseAddress
            </div>
        }
        
        <div class="mt-3">
            <strong>Click Count:</strong> @clickCount
        </div>
    </div>
</div>

@code {
    private TestResult? testResult;
    private bool isLoading = false;
    private string? baseAddress;
    private int clickCount = 0;

    protected override void OnInitialized()
    {
        try
        {
            baseAddress = "ApiService injected successfully";
            Console.WriteLine("✅ Test page: ApiService injection successful");
            Logger.LogInformation("✅ Test page initialized successfully");
        }
        catch (Exception ex)
        {
            baseAddress = $"Error: {ex.Message}";
            Console.WriteLine($"❌ Test page: ApiService injection failed: {ex.Message}");
            Logger.LogError(ex, "❌ Test page initialization failed");
        }
    }

    private async Task TestConnection()
    {
        Console.WriteLine("🔥 TestConnection method called!");
        System.Diagnostics.Debug.WriteLine("🔥 TestConnection method called!");
        
        isLoading = true;
        testResult = null;
        StateHasChanged();

        try
        {
            Console.WriteLine("🧪 Starting API connection test...");
            var success = await ApiService.TestApiConnectionAsync();
            
            testResult = new TestResult
            {
                Success = success,
                Message = success ? "API connection successful!" : "API connection failed - check if API is running on http://localhost:5260"
            };
            
            Console.WriteLine($"🧪 Test result: {testResult.Message}");
        }
        catch (Exception ex)
        {
            testResult = new TestResult
            {
                Success = false,
                Message = $"Error during test: {ex.Message}"
            };
            
            Console.WriteLine($"🧪 Test error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SimpleTest()
    {
        Console.WriteLine("🔥 SimpleTest method called!");
        System.Diagnostics.Debug.WriteLine("🔥 SimpleTest method called!");
        Logger.LogInformation("🔥 SimpleTest method called at {Time}", DateTime.Now);
        
        // Add a breakpoint here - this should be hit
        clickCount++;
        var currentTime = DateTime.Now.ToString("HH:mm:ss");
        baseAddress = $"Simple test clicked at {currentTime} (Click #{clickCount})";
        
        Console.WriteLine($"🔥 Updated baseAddress to: {baseAddress}");
        StateHasChanged();
    }

    private class TestResult
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
    }
} 