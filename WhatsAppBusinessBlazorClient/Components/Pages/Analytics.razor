@page "/analytics"
@rendermode InteractiveServer
@using WhatsAppBusinessBlazorClient.Models
@using WhatsAppBusinessBlazorClient.Services
@inject ApiService ApiService

<PageTitle>WhatsApp Business Admin - Analytics</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">Analytics Dashboard</h1>
                <div>
                    <button class="btn btn-success me-2" @onclick="LoadDataAsync" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        ðŸ“Š Load Data
                    </button>
                    <button class="btn btn-outline-primary" @onclick="RefreshData" disabled="@isLoading">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Display -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="text-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading analytics data...</span>
            </div>
            <p class="mt-2">Loading analytics data...</p>
        </div>
    }

    <!-- Statistics Cards - Only show when data is loaded -->
    @if (dataLoaded && !isLoading)
    {
        <div class="row mb-4">
            <div class="col-md-2">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@totalContacts</h5>
                        <p class="card-text">Total Contacts</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-info">@totalMessages</h5>
                        <p class="card-text">Total Messages</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-success">@automatedResponsesToday</h5>
                        <p class="card-text">Automated Today</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title text-warning">@successRate.ToString("F1")%</h5>
                        <p class="card-text">Success Rate</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Recent Logs Table - Only show when data is loaded -->
    @if (dataLoaded && !isLoading)
    {
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Recent Automated Responses (@(logs?.Count ?? 0) records)</h5>
                        <small class="text-muted">Last updated: @lastUpdated.ToString("HH:mm:ss")</small>
                    </div>
                    <div class="card-body">
                        @if (logs != null && logs.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Time</th>
                                            <th>Contact</th>
                                            <th>Status</th>
                                            <th>Processing Time</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var log in logs.Take(10))
                                        {
                                            <tr>
                                                <td>
                                                    <small>@log.RequestReceivedTime.ToString("MM/dd HH:mm")</small>
                                                </td>
                                                <td>
                                                    <strong>@log.ContactWaId</strong>
                                                </td>
                                                <td>
                                                    <span class="badge @(log.Status == "Sent" ? "bg-success" : "bg-danger")">
                                                        @log.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    <small>@log.ProcessingDurationMs ms</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted">
                                <p>No data available. Click "Load Data" to fetch from API.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Initial State -->
    @if (!dataLoaded && !isLoading)
    {
        <div class="text-center my-5">
            <i class="bi bi-bar-chart display-1 text-muted"></i>
            <h3 class="text-muted">Analytics Dashboard</h3>
            <p class="text-muted">Click "Load Data" to fetch analytics from the API</p>
        </div>
    }
</div>

@code {
    private List<AutomatedResponseLog>? logs;
    private int totalContacts = 0;
    private int totalMessages = 0;
    private int automatedResponsesToday = 0;
    private double successRate = 0;
    private bool isLoading = false;
    private bool dataLoaded = false;
    private string errorMessage = "";
    private DateTime lastUpdated = DateTime.Now;

    // No automatic loading in OnInitializedAsync - everything is lazy loaded
    protected override async Task OnInitializedAsync()
    {
        // Just initialize the component, no data loading
        await Task.CompletedTask;
    }

    private async Task LoadDataAsync()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            // Simulate API delay for testing
            await Task.Delay(500);

            // Load statistics first
            await LoadStatistics();

            // Then load logs
            await LoadLogs();

            dataLoaded = true;
            lastUpdated = DateTime.Now;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
            dataLoaded = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        if (!dataLoaded) return;
        await LoadDataAsync();
    }

    private async Task LoadStatistics()
    {
        try
        {
            // Call the real API to get system statistics
            var stats = await ApiService.GetSystemStatsAsync();
            
            if (stats != null)
            {
                totalContacts = stats.TotalContacts;
                totalMessages = stats.TotalAutomatedResponses;
                automatedResponsesToday = stats.ResponsesLast24Hours;
                successRate = stats.SuccessfulResponses > 0 && stats.TotalAutomatedResponses > 0 
                    ? (double)stats.SuccessfulResponses / stats.TotalAutomatedResponses * 100 
                    : 0;
            }
            else
            {
                // Fallback to default values if API returns null
                totalContacts = 0;
                totalMessages = 0;
                automatedResponsesToday = 0;
                successRate = 0;
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error loading statistics: {ex.Message}", ex);
        }
    }

    private async Task LoadLogs()
    {
        try
        {
            // Call the real API to get automated response logs
            logs = await ApiService.GetAutomatedResponseLogsAsync();
            
            // Ensure logs is never null
            if (logs == null)
            {
                logs = new List<AutomatedResponseLog>();
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error loading logs: {ex.Message}", ex);
        }
    }

    private void ClearError()
    {
        errorMessage = "";
    }
} 