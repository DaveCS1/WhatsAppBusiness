@page "/analytics"
@using WhatsAppBusinessBlazorClient.Models

<PageTitle>WhatsApp Business Admin - Analytics</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2>Analytics Dashboard</h2>
            <p class="text-muted">Monitor automated responses and system performance</p>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@totalContacts</h4>
                            <p class="card-text">Total Contacts</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-people" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@totalMessages</h4>
                            <p class="card-text">Total Messages</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-chat-dots" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@automatedResponsesToday</h4>
                            <p class="card-text">Responses Today</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-robot" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@successRate.ToString("F1")%</h4>
                            <p class="card-text">Success Rate</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-check-circle" style="font-size: 2rem;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Metrics -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Performance Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="text-center">
                                <h3 class="text-primary">@averageProcessingTime ms</h3>
                                <p class="text-muted">Avg Processing Time</p>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center">
                                <h3 class="text-success">@averageAiTime ms</h3>
                                <p class="text-muted">Avg AI Response Time</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Tour Type Distribution</h5>
                </div>
                <div class="card-body">
                    @if (tourTypeStats != null)
                    {
                        @foreach (var stat in tourTypeStats)
                        {
                            <div class="mb-2">
                                <div class="d-flex justify-content-between">
                                    <span>@stat.Key</span>
                                    <span>@stat.Value</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar" style="width: @(stat.Value * 100 / tourTypeStats.Values.Max())%"></div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Automated Response Logs -->
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Recent Automated Responses</h5>
                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshLogs">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="card-body">
                    @if (logs != null)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Contact</th>
                                        <th>AI Extracted</th>
                                        <th>Tour Details</th>
                                        <th>Processing</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in logs.Take(20))
                                    {
                                        <tr>
                                            <td>
                                                <small>@log.RequestReceivedTime.ToString("MM/dd HH:mm")</small>
                                            </td>
                                            <td>
                                                <strong>@log.ContactWaId</strong>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.AiExtractedData))
                                                {
                                                    <small class="text-muted">@GetExtractedDataSummary(log.AiExtractedData)</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@log.TemplateUsed</span><br>
                                                <small>@log.GuideNameUsed - @log.TourTimeUsed</small>
                                            </td>
                                            <td>
                                                <small>
                                                    Total: @log.ProcessingDurationMs ms<br>
                                                    AI: @log.AiApiCallDurationMs ms
                                                </small>
                                            </td>
                                            <td>
                                                <span class="badge @(log.Status == "Sent" ? "bg-success" : "bg-danger")">
                                                    @log.Status
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-info" @onclick="() => ShowLogDetails(log)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading logs...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Log Details Modal -->
@if (selectedLog != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Response Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseLogDetails"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Request Information</h6>
                            <p><strong>Contact:</strong> @selectedLog.ContactWaId</p>
                            <p><strong>Received:</strong> @selectedLog.RequestReceivedTime.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            <p><strong>Sent:</strong> @selectedLog.ResponseSentTime?.ToString("yyyy-MM-dd HH:mm:ss")</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Performance</h6>
                            <p><strong>Total Processing:</strong> @selectedLog.ProcessingDurationMs ms</p>
                            <p><strong>AI API Call:</strong> @selectedLog.AiApiCallDurationMs ms</p>
                            <p><strong>Status:</strong> <span class="badge @(selectedLog.Status == "Sent" ? "bg-success" : "bg-danger")">@selectedLog.Status</span></p>
                        </div>
                    </div>
                    
                    <h6>AI Extracted Data</h6>
                    <pre class="bg-light p-2 rounded">@selectedLog.AiExtractedData</pre>
                    
                    <h6>Tour Details Used</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Template:</strong> @selectedLog.TemplateUsed</p>
                            <p><strong>Guide:</strong> @selectedLog.GuideNameUsed</p>
                            <p><strong>Location:</strong> @selectedLog.TourLocationUsed</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Time:</strong> @selectedLog.TourTimeUsed</p>
                            <p><strong>Contact:</strong> @selectedLog.GuideNumberUsed</p>
                            <p><strong>Identifier:</strong> @selectedLog.IdentifiableObjectUsed</p>
                        </div>
                    </div>
                    
                    <h6>Full Response Text</h6>
                    <div class="bg-light p-3 rounded" style="max-height: 200px; overflow-y: auto;">
                        <pre style="white-space: pre-wrap; margin: 0;">@selectedLog.FullResponseText</pre>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(selectedLog.ErrorMessage))
                    {
                        <h6 class="text-danger">Error Message</h6>
                        <div class="alert alert-danger">
                            @selectedLog.ErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseLogDetails">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AutomatedResponseLog>? logs;
    private AutomatedResponseLog? selectedLog;
    private int totalContacts = 0;
    private int totalMessages = 0;
    private int automatedResponsesToday = 0;
    private double successRate = 0;
    private int averageProcessingTime = 0;
    private int averageAiTime = 0;
    private Dictionary<string, int>? tourTypeStats;

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalyticsData();
    }

    private async Task LoadAnalyticsData()
    {
        await LoadStatistics();
        await LoadLogs();
    }

    private async Task LoadStatistics()
    {
        // Sample statistics - replace with actual API call
        totalContacts = 5;
        totalMessages = 12;
        automatedResponsesToday = 3;
        successRate = 100.0;
        averageProcessingTime = 1240;
        averageAiTime = 825;

        tourTypeStats = new Dictionary<string, int>
        {
            ["Food Tour"] = 2,
            ["Walking Tour"] = 1,
            ["Historical Tour"] = 1,
            ["Art Tour"] = 1,
            ["Photography Tour"] = 1
        };
    }

    private async Task LoadLogs()
    {
        await Task.Delay(200); // Simulate API delay

        // Sample logs - replace with actual API call
        logs = new List<AutomatedResponseLog>
        {
            new AutomatedResponseLog
            {
                Id = 1,
                IncomingMessageId = 1,
                ContactWaId = "1234567890",
                RequestReceivedTime = DateTime.Now.AddMinutes(-10),
                ResponseSentTime = DateTime.Now.AddMinutes(-9),
                ProcessingDurationMs = 1250,
                AiApiCallDurationMs = 800,
                TemplateUsed = "Food Tour Template",
                CompanyNameUsed = "NYC Adventure Tours",
                GuideNameUsed = "Maria",
                TourLocationUsed = "Little Italy",
                TourTimeUsed = "2 PM",
                IdentifiableObjectUsed = "a small sign with our company logo",
                GuideNumberUsed = "(555) 123-4567",
                FullResponseText = "Hello John! Thank you for booking your tour with NYC Adventure Tours.\n\nYour tour guide Maria will meet you at Little Italy at 2 PM. Look for a small sign with our company logo.\n\nIf you need to reach your guide directly, you can contact them at: (555) 123-4567\n\nOur food tour will take you through the best authentic Italian restaurants and hidden gems in the neighborhood. You'll taste amazing pasta, pizza, and gelato while learning about the area's rich history.\n\nWe look forward to showing you an amazing time! If you have any questions before your tour, feel free to reach out.",
                Status = "Sent",
                AiExtractedData = "{\"userName\":\"John\",\"tourType\":\"Food Tour\",\"date\":\"tomorrow\",\"time\":\"2 PM\"}"
            },
            new AutomatedResponseLog
            {
                Id = 2,
                IncomingMessageId = 4,
                ContactWaId = "0987654321",
                RequestReceivedTime = DateTime.Now.AddMinutes(-20),
                ResponseSentTime = DateTime.Now.AddMinutes(-18),
                ProcessingDurationMs = 1100,
                AiApiCallDurationMs = 750,
                TemplateUsed = "Walking Tour Template",
                CompanyNameUsed = "NYC Adventure Tours",
                GuideNameUsed = "Tom",
                TourLocationUsed = "Central Park Entrance",
                TourTimeUsed = "9 AM",
                IdentifiableObjectUsed = "a small sign with our company logo",
                GuideNumberUsed = "(555) 234-5678",
                FullResponseText = "Hello Sarah! Thank you for booking your tour with NYC Adventure Tours.\n\nYour tour guide Tom will meet you at Central Park Entrance at 9 AM. Look for a small sign with our company logo.\n\nIf you need to reach your guide directly, you can contact them at: (555) 234-5678\n\nOur walking tour covers the most scenic routes through Central Park and surrounding neighborhoods. You'll discover hidden paths, historical landmarks, and beautiful viewpoints perfect for photos.\n\nWe look forward to showing you an amazing time! If you have any questions before your tour, feel free to reach out.",
                Status = "Sent",
                AiExtractedData = "{\"userName\":\"Sarah\",\"tourType\":\"Walking Tour\",\"date\":\"weekend\",\"time\":\"morning\"}"
            },
            new AutomatedResponseLog
            {
                Id = 3,
                IncomingMessageId = 7,
                ContactWaId = "5555555555",
                RequestReceivedTime = DateTime.Now.AddHours(-3),
                ResponseSentTime = DateTime.Now.AddHours(-2),
                ProcessingDurationMs = 1350,
                AiApiCallDurationMs = 900,
                TemplateUsed = "Historical Tour Template",
                CompanyNameUsed = "NYC Adventure Tours",
                GuideNameUsed = "Professor Williams",
                TourLocationUsed = "City Hall",
                TourTimeUsed = "6 PM",
                IdentifiableObjectUsed = "a small sign with our company logo",
                GuideNumberUsed = "(555) 345-6789",
                FullResponseText = "Hello Mike! Thank you for booking your tour with NYC Adventure Tours.\n\nYour tour guide Professor Williams will meet you at City Hall at 6 PM. Look for a small sign with our company logo.\n\nIf you need to reach your guide directly, you can contact them at: (555) 345-6789\n\nOur historical tour will take you through centuries of New York history, from colonial times to modern day. You'll visit significant landmarks and hear fascinating stories about the people who shaped this great city.\n\nWe look forward to showing you an amazing time! If you have any questions before your tour, feel free to reach out.",
                Status = "Sent",
                AiExtractedData = "{\"userName\":\"Mike\",\"tourType\":\"Historical Tour\",\"date\":\"Friday\",\"time\":\"6 PM\"}"
            }
        };
    }

    private async Task RefreshLogs()
    {
        logs = null;
        StateHasChanged();
        await LoadAnalyticsData();
    }

    private void ShowLogDetails(AutomatedResponseLog log)
    {
        selectedLog = log;
    }

    private void CloseLogDetails()
    {
        selectedLog = null;
    }

    private string GetExtractedDataSummary(string? aiData)
    {
        if (string.IsNullOrEmpty(aiData)) return "No data";
        
        try
        {
            // Simple parsing for display - in real app, use JSON deserializer
            if (aiData.Contains("userName"))
            {
                var parts = aiData.Replace("{", "").Replace("}", "").Replace("\"", "").Split(',');
                var summary = string.Join(", ", parts.Take(2));
                return summary.Length > 30 ? summary.Substring(0, 30) + "..." : summary;
            }
        }
        catch
        {
            // Ignore parsing errors
        }
        
        return "Data available";
    }
} 